{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/REACT/chat-apppp/src/chat/ChatContainer.js\";\nimport React, { Component } from 'react';\nimport SideBar from './SideBar';\nimport { COMMUNITY_CHAT, MESSAGE_SENT, MESSAGE_RECIEVED, TYPING } from '../Events';\nimport ChatHeading from './ChatHeading';\nimport Messages from '../Messages/Message';\nimport MessageInput from '../Messages/MessageInput';\nexport default class ChatContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.resetChat = chat => {\n      return this.addChat(chat, true);\n    };\n\n    this.addChat = (chat, reset) => {\n      const socket = this.props.socket;\n      const chats = this.state.chats;\n      const newChats = reset ? [chat] : [...chats, chat];\n      this.setState({\n        chats: newChats,\n        activeChat: reset ? chat : this.state.activeChat\n      });\n      const messageEvent = \"\".concat(MESSAGE_RECIEVED, \"-\").concat(chat.id);\n      const typingEvent = \"\".concat(TYPING, \"-\").concat(chat.id);\n      socket.on(typingEvent, this.updateTypingInChat(chat.id));\n      socket.on(messageEvent, this.addMessageToChat(chat.id));\n    };\n\n    this.addMessageToChat = chatId => {\n      return message => {\n        const chats = this.state.chats;\n        let newChats = chats.map(chat => {\n          if (chat.id === chatId) chat.messages.push(message);\n          return chat;\n        });\n        this.setState({\n          chats: newChats\n        });\n      };\n    };\n\n    this.updateTypingInChat = chatId => {\n      return ({\n        isTyping,\n        user\n      }) => {\n        if (user !== this.props.user.name) {\n          const chats = this.state.chats;\n          let newChats = chats.map(chat => {\n            if (chat.id === chatId) {\n              if (isTyping && !chat.typingUsers.includes(user)) {\n                chat.typingUsers.push(user);\n              } else if (!isTyping && chat.typingUsers.includes(user)) {\n                chat.typingUsers = chat.typingUsers.filter(u => u !== user);\n              }\n            }\n\n            return chat;\n          });\n          this.setState({\n            chats: newChats\n          });\n        }\n      };\n    };\n\n    this.sendMessage = (chatId, message) => {\n      const socket = this.props.socket;\n      socket.emit(MESSAGE_SENT, {\n        chatId,\n        message\n      });\n    };\n\n    this.sendTyping = (chatId, isTyping) => {\n      const socket = this.props.socket;\n      socket.emit(TYPING, {\n        chatId,\n        isTyping\n      });\n    };\n\n    this.setActiveChat = activeChat => {\n      this.setState({\n        activeChat\n      });\n    };\n\n    this.state = {\n      chats: [],\n      activeChat: null\n    };\n  }\n\n  componentDidMount() {\n    const socket = this.props.socket;\n    socket.emit(COMMUNITY_CHAT, this.resetChat);\n  }\n\n  render() {\n    const _this$props = this.props,\n          user = _this$props.user,\n          logout = _this$props.logout;\n    const _this$state = this.state,\n          chats = _this$state.chats,\n          activeChat = _this$state.activeChat;\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(SideBar, {\n      logout: logout,\n      chats: chats,\n      user: user,\n      activeChat: activeChat,\n      setActiveChat: this.setActiveChat,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"chat-room-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, activeChat !== null ? React.createElement(\"div\", {\n      className: \"chat-room\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(ChatHeading, {\n      name: activeChat.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }), React.createElement(Messages, {\n      messages: activeChat.messages,\n      user: user,\n      typingUsers: activeChat.typingUsers,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }), React.createElement(MessageInput, {\n      sendMessage: message => {\n        this.sendMessage(activeChat.id, message);\n      },\n      sendTyping: isTyping => {\n        this.sendTyping(activeChat.id, isTyping);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    })) : React.createElement(\"div\", {\n      className: \"chat-room choose\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Choose a chat!\"))));\n  }\n\n}","map":{"version":3,"sources":["/home/user/Desktop/REACT/chat-apppp/src/chat/ChatContainer.js"],"names":["React","Component","SideBar","COMMUNITY_CHAT","MESSAGE_SENT","MESSAGE_RECIEVED","TYPING","ChatHeading","Messages","MessageInput","ChatContainer","constructor","props","resetChat","chat","addChat","reset","socket","chats","state","newChats","setState","activeChat","messageEvent","id","typingEvent","on","updateTypingInChat","addMessageToChat","chatId","message","map","messages","push","isTyping","user","name","typingUsers","includes","filter","u","sendMessage","emit","sendTyping","setActiveChat","componentDidMount","render","logout"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport SideBar from './SideBar'\r\nimport { COMMUNITY_CHAT, MESSAGE_SENT, MESSAGE_RECIEVED, TYPING } from '../Events'\r\nimport ChatHeading from './ChatHeading'\r\nimport Messages from '../Messages/Message'\r\nimport MessageInput from '../Messages/MessageInput'\r\n\r\n\r\nexport default class ChatContainer extends Component {\r\n\tconstructor(props) {\r\n\t  super(props);\r\n\r\n\t  this.state = {\r\n\t  \tchats:[],\r\n\t  \tactiveChat:null\r\n\t  };\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst { socket } = this.props\r\n\t\tsocket.emit(COMMUNITY_CHAT, this.resetChat)\r\n\t}\r\n\r\n\r\n\tresetChat = (chat)=>{\r\n\t\treturn this.addChat(chat, true)\r\n\t}\r\n\r\n\r\n\taddChat = (chat, reset)=>{\r\n\t\tconst { socket } = this.props\r\n\t\tconst { chats } = this.state\r\n\r\n\t\tconst newChats = reset ? [chat] : [...chats, chat]\r\n\t\tthis.setState({chats:newChats, activeChat:reset ? chat : this.state.activeChat})\r\n\r\n\t\tconst messageEvent = `${MESSAGE_RECIEVED}-${chat.id}`\r\n\t\tconst typingEvent = `${TYPING}-${chat.id}`\r\n\r\n\t\tsocket.on(typingEvent, this.updateTypingInChat(chat.id))\r\n\t\tsocket.on(messageEvent, this.addMessageToChat(chat.id))\r\n\t}\r\n\r\n\r\n\taddMessageToChat = (chatId)=>{\r\n\t\treturn message => {\r\n\t\t\tconst { chats } = this.state\r\n\t\t\tlet newChats = chats.map((chat)=>{\r\n\t\t\t\tif(chat.id === chatId)\r\n\t\t\t\t\tchat.messages.push(message)\r\n\t\t\t\treturn chat\r\n\t\t\t})\r\n\r\n\t\t\tthis.setState({chats:newChats})\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tupdateTypingInChat = (chatId) =>{\r\n\t\treturn ({isTyping, user})=>{\r\n\t\t\tif(user !== this.props.user.name){\r\n\r\n\t\t\t\tconst { chats } = this.state\r\n\r\n\t\t\t\tlet newChats = chats.map((chat)=>{\r\n\t\t\t\t\tif(chat.id === chatId){\r\n\t\t\t\t\t\tif(isTyping && !chat.typingUsers.includes(user)){\r\n\t\t\t\t\t\t\tchat.typingUsers.push(user)\r\n\t\t\t\t\t\t}else if(!isTyping && chat.typingUsers.includes(user)){\r\n\t\t\t\t\t\t\tchat.typingUsers = chat.typingUsers.filter(u => u !== user)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn chat\r\n\t\t\t\t})\r\n\t\t\t\tthis.setState({chats:newChats})\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tsendMessage = (chatId, message)=>{\r\n\t\tconst { socket } = this.props\r\n\t\tsocket.emit(MESSAGE_SENT, {chatId, message} )\r\n\t}\r\n\r\n\tsendTyping = (chatId, isTyping)=>{\r\n\t\tconst { socket } = this.props\r\n\t\tsocket.emit(TYPING, {chatId, isTyping})\r\n\t}\r\n\r\n\tsetActiveChat = (activeChat)=>{\r\n\t\tthis.setState({activeChat})\r\n\t}\r\n\trender() {\r\n\t\tconst { user, logout } = this.props\r\n\t\tconst { chats, activeChat } = this.state\r\n\t\treturn (\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<SideBar\r\n\t\t\t\t\tlogout={logout}\r\n\t\t\t\t\tchats={chats}\r\n\t\t\t\t\tuser={user}\r\n\t\t\t\t\tactiveChat={activeChat}\r\n\t\t\t\t\tsetActiveChat={this.setActiveChat}\r\n\t\t\t\t\t/>\r\n\t\t\t\t<div className=\"chat-room-container\">\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tactiveChat !== null ? (\r\n\r\n\t\t\t\t\t\t\t<div className=\"chat-room\">\r\n\t\t\t\t\t\t\t\t<ChatHeading name={activeChat.name} />\r\n\t\t\t\t\t\t\t\t<Messages\r\n\t\t\t\t\t\t\t\t\tmessages={activeChat.messages}\r\n\t\t\t\t\t\t\t\t\tuser={user}\r\n\t\t\t\t\t\t\t\t\ttypingUsers={activeChat.typingUsers}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t<MessageInput\r\n\t\t\t\t\t\t\t\t\tsendMessage={\r\n\t\t\t\t\t\t\t\t\t\t(message)=>{\r\n\t\t\t\t\t\t\t\t\t\t\tthis.sendMessage(activeChat.id, message)\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tsendTyping={\r\n\t\t\t\t\t\t\t\t\t\t(isTyping)=>{\r\n\t\t\t\t\t\t\t\t\t\t\tthis.sendTyping(activeChat.id, isTyping)\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t):\r\n\t\t\t\t\t\t<div className=\"chat-room choose\">\r\n\t\t\t\t\t\t\t<h3>Choose a chat!</h3>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}